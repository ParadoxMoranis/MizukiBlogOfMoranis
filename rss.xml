<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Moranis</title><description>MoranisZ Blog</description><link>https://paradoxmoranis.github.io/MizukiBlogOfMoranis/</link><language>en</language><item><title>对MT领域一些新的理解</title><link>https://paradoxmoranis.github.io/posts/%E5%AF%B9mt%E9%A2%86%E5%9F%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E7%9A%84%E4%BA%86%E8%A7%A3/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/%E5%AF%B9mt%E9%A2%86%E5%9F%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E7%9A%84%E4%BA%86%E8%A7%A3/</guid><description>最近一直在读论文，也是第一次读这么多专业的论文，记录一下收获</description><pubDate>Wed, 17 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;MT领域一些新的理解&lt;/h1&gt;
&lt;h2&gt;对于翻译质量的一些指标&lt;/h2&gt;
&lt;h3&gt;TransBench&lt;/h3&gt;
&lt;p&gt;阿里巴巴和北京语言大学联合发布了翻译质量评估框架&lt;a href=&quot;https://arxiv.org/pdf/2505.14244.pdf&quot;&gt;TransBench&lt;/a&gt;，这个模型提出了三层评估标准，分别为场景适应性、文化忠实度、通用能力。重点评估了当前机器翻译模型在不同场景下的翻译质量。他使用 Marco-MOS（领域特定模型）作为新指标，与 BLEU/TER 结合，强调工业场景（如电商）的鲁棒性。&lt;/p&gt;
&lt;h3&gt;FRMT&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2210.00193.pdf&quot;&gt;FRMT&lt;/a&gt;重点关注句子级的翻译，聚焦于few-shot region-aware机器翻译（MT），即使用少量示例来控制翻译输出适应特定区域变体。这种方法更多是为了少数的小语种变种而存在。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;few-shot region-aware MT 是一种智能翻译方法：模型先学会基本翻译（用大量无标签数据），然后通过少量区域示例（exemplars），在翻译时快速调整输出，让结果适合特定区域（如巴西或台湾）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;M3T&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2406.08255.pdf&quot;&gt;M3T&lt;/a&gt;虽然在考虑文档布局对翻译的影响，但是重点仍然关注在翻译质量，没有对译后文档的布局质量做评估，更多是测试模型利用布局能力。&lt;/p&gt;
&lt;h3&gt;三者的异同&lt;/h3&gt;
&lt;p&gt;1.&lt;strong&gt;关注点&lt;/strong&gt; ：三个评估基准均关注在翻译质量上，使用不同的基准测试集，关注与不同方面的翻译质量。TransBench和FRMT都更多的考虑句子级翻译，TransBench关注通用机器翻译，FRMT更关注区域变体的翻译，M3T更关注文档布局对翻译的影响。
2.&lt;strong&gt;数据集&lt;/strong&gt; ：TransBench使用语言对的标注方式。针对不同的层次和不同的评估标准有不同的标注内容。属于句子级/段落级的数据。FRMT使用多层分类标注的数据集，先将数据分为三个“桶”，每个桶再分exemplar（提示用，少量）、dev（调参用）和test（最终测用）。M3T的数据集主要是文档，标注内容主要是视觉元组。标注方法类似于框框，将不同的内容（例如文字，图片，表格等）“框起来”，并标注类型，阅读顺序等信息。&lt;/p&gt;
&lt;h2&gt;一些数据集&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/2006.01038.pdf&quot;&gt;DocBank&lt;/a&gt;是一个用于文档布局分析的基准数据集。焦点是解决传统文档布局分析依赖视觉模型而忽略文本信息的问题。其标注方式是对文档页面进行token级别的标注。有摘要，作者，表格，公式等标注。相对于M3T，DocBank更关注文档布局，标注也更加精细，M3T更关注文档翻译和布局保持，拥有源-目标对,有对翻译质量的侧重。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ibm-aur-nlp/PubLayNet&quot;&gt;PubLayNet&lt;/a&gt;最大的公开文档布局数据集，它通过弱监督自动生成：匹配 PDF 的 XML 表示与内容，创建布局标注。包含边界框，多边形切割。属于页面级和元素级。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/2006.01038.pdf&quot;&gt;DocLayNet&lt;/a&gt; 是一个用于文档布局分析的基准数据集。焦点是布局分割，支持工业应用如信息提取。采用COCO格式，有许多种标签。同样更注重文档布局分析，不关注翻译质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这三者均采用Bounding Box Annotation 或 Axis-Aligned Bounding Boxes (AABB)的标注方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;我的看法&lt;/h2&gt;
&lt;h3&gt;MT领域现在存在的一些问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;机器翻译模型应用于工业场景时，由于通用基准中缺乏领域特定术语、文化细微差别和文体惯例，暴露出关键局限性。现有评估框架无法充分评估专业场景中的性能，导致学术基准与实际效能之间存在差距。&lt;/li&gt;
&lt;li&gt;在对一些文档类型，尤其是PDF这种生来似乎就是不可变的文件类型缺乏有效的处理。不仅存在不同场景的翻译质量问题，更重要的是难以处理PDF的布局，图片，表格等各种内容。导致翻译出来的文档阅读体验非常差。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;我们缺乏一种统一的标准，用来评估机器翻译在工业级的应用场景下的性能。包括对翻译质量的评估和对文档布局（尤其译后）的评估。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>TransBench论文解读</title><link>https://paradoxmoranis.github.io/posts/transbench/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/transbench/</guid><description>本篇文章主要是我个人对阿里巴巴和北京语言大学关于机器翻译MT在工业级领域的应用提出的新标准TransBench的看法。仅代表个人观点。</description><pubDate>Tue, 16 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;TransBench&lt;/h1&gt;
&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;TransBench通过三个方面评估机器翻译在工业级翻译的表现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础语言能力&lt;/li&gt;
&lt;li&gt;特定领域能力&lt;/li&gt;
&lt;li&gt;文化适应性
这三个方面融合了传统的BLEU,TER，Marco-MOS的指标。
TransBench提供了翻译评估的结构化框架，公开的电商翻译基准测试集，一个多层次的评估指标和评估工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;多层次评估指标&lt;/h3&gt;
&lt;p&gt;TransBench在论文图片中给出了三个层次，由上到下是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文化保真度&lt;/li&gt;
&lt;li&gt;场景实用性&lt;/li&gt;
&lt;li&gt;通用能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;传统MT基准&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BLEU：通过比较机器翻译输出与一个或者多个参考翻译的相似度做评估，基于n-gram，还拥有简短惩罚&lt;/li&gt;
&lt;li&gt;TER：基于编辑距离的指标，用于测量将机器翻译输出转换为参考翻译所需的最小编辑操作次数，包括插入、删除、替换和移位。它反映了翻译的错误率。&lt;/li&gt;
&lt;li&gt;Marco-MOS：Marco-MOS是一种自动化翻译质量评估模型，专为特定领域（如电子商务）设计。它基于微调大型语言模型（例如Qwen2.5的Instruct版本），使用手动标注的翻译质量分数数据集进行训练。这些分数采用Mean Opinion Score (MOS) 规模（0到5分），旨在提供与人类判断高度相关的领域特定评估。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;评估&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;TransBench实际上是将传统的评估方法进行结合，从多维度评估机器翻译的基础语言能力，特定领域能力，文化适应性三个方面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;评估结构&lt;/th&gt;
&lt;th&gt;子模块&lt;/th&gt;
&lt;th&gt;数据集&lt;/th&gt;
&lt;th&gt;评估指标&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;场景适应性&lt;/td&gt;
&lt;td&gt;电子商务行业翻译质量评估&lt;/td&gt;
&lt;td&gt;17k&lt;/td&gt;
&lt;td&gt;E-MOS &amp;amp; 常见QE指标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;金融行业翻译质量评估&lt;/td&gt;
&lt;td&gt;12k&lt;/td&gt;
&lt;td&gt;F-MOS &amp;amp; 常见QE指标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;综合能力&lt;/td&gt;
&lt;td&gt;翻译鲁棒性评估&lt;/td&gt;
&lt;td&gt;2.6k&lt;/td&gt;
&lt;td&gt;BLEU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;翻译幻觉率评估&lt;/td&gt;
&lt;td&gt;29k&lt;/td&gt;
&lt;td&gt;幻觉率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文化忠实度&lt;/td&gt;
&lt;td&gt;禁忌词翻译评估&lt;/td&gt;
&lt;td&gt;232&lt;/td&gt;
&lt;td&gt;准确率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;敬语翻译评估&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;td&gt;准确率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我认为，TransBench提出的评估标准是对传统，E-MOS，F-MOS，BLEU等标准的结合，用于评估机器翻译在工业级应用的翻译效果。&lt;/p&gt;
&lt;h2&gt;数据集&lt;/h2&gt;
&lt;h3&gt;场景适应性数据集&lt;/h3&gt;
&lt;h4&gt;主要构成&lt;/h4&gt;
&lt;p&gt;TransBench提供的数据集主要以以语言对的形式标注。其数据集
标注内容有以下四个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;源文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目标文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本应用场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语言对&lt;/p&gt;
&lt;h4&gt;数据处理方式&lt;/h4&gt;
&lt;p&gt;采用三个步骤：算法过滤、人工标注和特殊
处理。算法过滤的目的是去除重复和明显低质量的数据。人工标注是使用专业翻译人员进行直接标
注而非采用译后编辑，即便成本更高。特殊处理则针对有害、敏感数据的处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详见论文&lt;a href=&quot;https://arxiv.org/pdf/2505.14244&quot;&gt;TransBench&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;通用能力数据集&lt;/h3&gt;
&lt;h4&gt;幻觉数据集&lt;/h4&gt;
&lt;p&gt;幻觉数据集总结了机器翻译在工业级翻译时可能遇到的各种幻觉，包括重复生成，整句未翻译或者误译，输出语言不匹配，部分翻译遗漏，欠翻译或过翻译。&lt;/p&gt;
&lt;h4&gt;鲁棒性数据集&lt;/h4&gt;
&lt;p&gt;数据集标注主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Source Text（源文本）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hacked Source Text（篡改后的源文本）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Text（参考文本）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hacking Method（篡改方法）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Pair（语言对）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这部分数据集有三个级别的错误类型
• 句子级：乱序词。
•字符级：拼写错误。
•词汇级：术语混淆。&lt;/p&gt;
&lt;p&gt;样本展示了具有句子级乱序词模式的鲁棒数据。可见被篡改的源文本打乱了源文本中的部分词语。期望翻译模型能保持翻译结果的准确率。&lt;/p&gt;
&lt;h3&gt;文化保真度数据集&lt;/h3&gt;
&lt;p&gt;这部分数据集两种类型，敬语数据集（主要针对日语韩语）和禁忌语数据集。
禁语数据集标注主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Source Text（源文本）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Text（参考文本）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source Taboo Words（源文本禁忌词）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Taboo Words（参考文本禁忌词）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Pair（语言对）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;从我的个人观点看来TransBench根据自己提出的多层次评估指标，将传统的工业级机器翻译MT指标和标准分别应用到各个层次，形成一套新的标准。其数据集也是根据不同的层次有不同的标注方法。&lt;/p&gt;
</content:encoded></item><item><title>M3T论文解读</title><link>https://paradoxmoranis.github.io/posts/m3t/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/m3t/</guid><description>本篇文章主要是我个人对M3T这个文档机器翻译新的评估标准的看法。仅代表个人观点。</description><pubDate>Tue, 16 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;我对M3T的看法&lt;/h1&gt;
&lt;h3&gt;概述&lt;/h3&gt;
&lt;h4&gt;核心内容&lt;/h4&gt;
&lt;p&gt;传统MT系统主要处理句子级文本，忽略文档的整体上下文和布局（如PDF中的多列、表格、标题），这会导致OCR错误或翻译质量下降。M3T数据集旨在解决这个问题，测试模型能否利用视觉线索（如布局信息）来改善翻译，尤其是对复杂PDF文档。&lt;/p&gt;
&lt;h4&gt;数据集详情&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;来源&lt;/strong&gt;：从EUR-Lex（法律文档）、DocLayNet（带布局注解的文档）和RVL-CDIP（扫描文档）采集数据，覆盖de、es、fr、zh和en语言对，领域包括法律、金融、专利等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt;：包含各种布局元素（如文本块、标题、表格），通过专业注解标注边界框和阅读顺序。翻译由专业人士基于上下文完成，长度控制在源文本±10%内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统计&lt;/strong&gt;：文本块和表格单元最多，语言对以en→zh最多（259对），其他均衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;补充&lt;/strong&gt;：提供自动注解的EUR-Lex数据，供社区研究。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;实验部分&lt;/h4&gt;
&lt;p&gt;使用LLaVa-v1.5模型（结合CLIP视觉编码器和Vicuna-13B）测试视觉特征对翻译的影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;：输入OCR文本或金标准文本，加入随机图像、文本块图像或整文档图像，评估用doc-COMET分数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结果&lt;/strong&gt;：视觉特征改善了OCR文本翻译（尤其在中文上提升0.02），文档图像效果最好，但整体提升有限（0.01-0.02），短段或表格翻译易出错。en→其他语言时模型表现不佳。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论&lt;/strong&gt;：多模态模型有潜力，但文档翻译仍需改进。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;局限性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据偏向高资源语言和法律/金融领域，可能有偏见。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;M3T 数据集介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数据来源&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;EUR-Lex&lt;/strong&gt;：欧盟法律文档，由专业翻译员翻译，支持多语言，保留布局。采样复杂布局文档（如包含表格、脚注）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DocLayNet&lt;/strong&gt;：带布局注解的文档，采样包括平面、多列、图像和表格。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RVL-CDIP&lt;/strong&gt;：扫描文档，随机采样排除简单类型如传真封面。
采样策略强调覆盖多种布局元素，使用 Faster R-CNN（基于 detectron2）自动标签辅助（平均 F1 分数 73.4）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;补充数据&lt;/strong&gt;：提供自动注解的 EUR-Lex 文档，用于未来研究（如模型训练）。这些数据从 JRC-Acquis 平行语料提取，使用 Tesseract OCR 提取文本，并对齐成 &amp;lt;source-text, OCR’d-text, bounding-box, target-text&amp;gt; 元组。&lt;/p&gt;
&lt;h3&gt;标注内容&lt;/h3&gt;
&lt;p&gt;注解分为两个阶段，由专业注解员完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;布局注解&lt;/strong&gt;：提取文本，并标注边界框（bounding boxes，非重叠矩形）和标签。标签扩展自 DocLayNet ontology，包括：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Text&lt;/strong&gt;：常规文本段落或逻辑分组的文本块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Section-header&lt;/strong&gt;：文档部分标题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page-footer&lt;/strong&gt;：页脚重复元素（如页码）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vertical&lt;/strong&gt;：垂直方向文本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Table-cell&lt;/strong&gt;：表格单元文本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Table&lt;/strong&gt;：表格结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page-header&lt;/strong&gt;：页眉重复元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Picture&lt;/strong&gt;：图形或照片。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List-item&lt;/strong&gt;：列表项（悬挂形状）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formula&lt;/strong&gt;：独立数学或化学公式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Footnote&lt;/strong&gt;：脚注。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt;：代码块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;：文档整体标题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caption&lt;/strong&gt;：图片或表格的描述文本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Order&lt;/strong&gt;：阅读顺序（欧洲语言一般左到右、上到下；表格为单元格左到右、上到下）。
这些标签帮助模型理解逻辑分区和上下文。注解质量控制：随机审查 10%，若错误 &amp;gt;5% 则重注。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;翻译注解&lt;/strong&gt;：基于原始文档上下文翻译提取文本。使用商业 MT 系统预翻译，然后专业翻译员 post-edit，确保翻译长度在源文本 ±10% 内（便于评估布局保持）。质量控制类似布局注解。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;数据格式：类似COCO&lt;/h3&gt;
&lt;p&gt;格式基于扩展 DocLayNet ontology，且使用边界框注解（坐标 + 标签），它类似于 COCO 格式（JSON 文件包含图像元数据、边界框和类别标签）。DocLayNet 本身使用 COCO 风格的 JSON 注解，用于文档布局分割任务，因此 M3T 很可能采用类似结构：每个文档有图像（PDF 页）、注解列表（bbox [x, y, width, height]、category_id、阅读顺序）。补充数据是元组格式，便于对齐 OCR 和平行文本。没有提及其他格式如 YOLO 或 其他格式。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我认为，M3T注重于文档翻译的前后阅读顺序的一致性，不太关注&lt;/p&gt;
&lt;p&gt;翻译的质量，与TransBench互补。或许两个标准结合可以形成在机器翻译的工业级应用领域的全新的，全面的标准。&lt;/p&gt;
</content:encoded></item><item><title>FRMT论文解读</title><link>https://paradoxmoranis.github.io/posts/frmt/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/frmt/</guid><description>本篇文章主要是我个人对FRMT这个文档机器翻译新的评估标准的看法。仅代表个人观点。</description><pubDate>Tue, 16 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;FRMT阅读总结&lt;/h1&gt;
&lt;h2&gt;论文主要内容&lt;/h2&gt;
&lt;p&gt;传统MT系统往往偏向网络上数据量大的“多数派”变体（如巴西葡萄牙语），忽略少数派变体，导致用户体验差。论文提出FRMT数据集作为基准，测试模型在few-shot设置下的适应能力（图1展示用exemplars控制输出，如bus翻译为ônibus或autocarro）。贡献包括：(1) 构建FRMT数据集；(2) 评估自动指标和人类评测的相关性；(3) 提供基线模型；(4) 给出训练、评估和比较模型的指南。论文强调few-shot方法能推广到其他风格或区域，而不需大量标注数据。
相关工作部分回顾了风格转移（style transfer）和变体针对MT（如区域、礼貌级），但多数需大量标注数据。FRMT强调few-shot，数据集设计针对区域差异，并包括潜在干扰项。&lt;/p&gt;
&lt;h2&gt;数据集&lt;/h2&gt;
&lt;p&gt;FRMT的数据集被分为三个“桶”，也就是三个类别或者说是子集。每个类别用于针对不同类型的挑战和问题。
FRMT总数据分成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lexical桶（词汇桶）：焦点是区域特定词汇。收集了像“bus”这样的词（巴西译“ônibus”，葡萄牙译“autocarro”），从Wikipedia相关页面取句子。目的是考模型能不能根据exemplar，正确用区域专有词，而不是混用。&lt;/li&gt;
&lt;li&gt;Entity桶（实体桶）：焦点是区域关联实体，如地名（里斯本 vs. 圣保罗）。句子从这些实体的Wikipedia页面取。目的是加“干扰项”（distractors），考模型别被预训练偏见骗了（比如模型默认偏巴西，就错译葡萄牙实体）。&lt;/li&gt;
&lt;li&gt;Random桶（随机桶）：自然随机采样Wikipedia好文章的句子，没特定主题。目的是模拟日常翻译，考整体表现。同一源句有所有区域的翻译参考。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个桶再分exemplar（提示用，少量）、dev（调参用）和test（最终测用）。总共几千句，分桶让评估更精准：比如lexical桶测词汇准确，entity测抗干扰。M3T也类似，分来源（如EUR-Lex桶），但焦点是布局而非区域。&lt;/p&gt;
</content:encoded></item><item><title>qETRC在ArchLinxu的构建</title><link>https://paradoxmoranis.github.io/posts/qetrc/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/qetrc/</guid><description>本篇文章主要讲解如何在ArchLinux上构建qETRC。其他操作系统请自行搜索。</description><pubDate>Sat, 13 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;qETRC在ArchLinxu的构建方法&lt;/h1&gt;
&lt;h2&gt;安装第三方库&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S base-devel cmake qt6-base qt6-tools qt6-declarative qt6-quickcontrols2 qt6-svg qt6-webengine qt6-webchannel qt6-webview qt6-websockets qt6-x11extras SARibbon
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;子模块初始化&lt;/h2&gt;
&lt;p&gt;在项目根目录下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule init
git submodule update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后正常进行CMake构建即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake ..
make
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;问题&lt;/h2&gt;
&lt;p&gt;在使用git子模块初始化SARibbon后，构建过程中出现了以下错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CMake Error at CMakeLists.txt:121 (get_target_property):
  The LOCATION property may not be read from target &quot;SARibbonBar&quot;. Use the
  target name directly with add_custom_command, or use the generator
  expression $&amp;lt;TARGET_FILE&amp;gt;, as appropriate.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-- SARibbon lib SARibbonBar_LIB_FILE-NOTFOUND
-- Could NOT find QWindowKit (missing: QWindowKit_DIR)
-- QWK not found, install not performed
-- Flags:   -- -- -g -- -O3 -DNDEBUG
-- Configuring incomplete, errors occurred!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;修改内容&lt;/h2&gt;
&lt;h3&gt;1. 修改SARibbon安装部分&lt;/h3&gt;
&lt;p&gt;将原来使用已弃用的LOCATION属性的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (AUTO_INSTALL_SARibbon AND SARIBBON_FOUND)
    get_target_property(SARibbonBar_LIB_FILE SARibbonBar LOCATION_${CMAKE_BUILD_TYPE})
    message(STATUS &quot;SARibbon lib ${SARibbonBar_LIB_FILE}&quot;)
    install(FILES ${SARibbonBar_LIB_FILE} DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改为使用CMake生成器表达式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (AUTO_INSTALL_SARibbon AND SARIBBON_FOUND)
    # 使用generator表达式代替get_target_property，避免LOCATION属性错误
    set(SARibbonBar_LIB_FILE &quot;$&amp;lt;TARGET_FILE:SARibbonBar&amp;gt;&quot;)
    message(STATUS &quot;SARibbon lib ${SARibbonBar_LIB_FILE}&quot;)
    install(TARGETS SARibbonBar DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. 修改QWindowKit安装部分&lt;/h3&gt;
&lt;p&gt;同样，将QWindowKit相关的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find_package(QWindowKit CONFIG)
if (QWindowKit_FOUND)
    get_target_property(QWK_CORE_FILE QWindowKit::Core LOCATION_${CMAKE_BUILD_TYPE})
    get_target_property(QWK_WIDGETS_FILE QWindowKit::Widgets LOCATION_${CMAKE_BUILD_TYPE})
    message(STATUS &quot;QWK lib ${QWK_CORE_FILE}&quot;)
    install(FILES ${QWK_CORE_FILE} ${QWK_WIDGETS_FILE} DESTINATION ${CMAKE_INSTALL_BINDIR})
else()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find_package(QWindowKit CONFIG)
if (QWindowKit_FOUND)
    # 使用generator表达式代替get_target_property，避免LOCATION属性错误
    set(QWK_CORE_FILE &quot;$&amp;lt;TARGET_FILE:QWindowKit::Core&amp;gt;&quot;)
    set(QWK_WIDGETS_FILE &quot;$&amp;lt;TARGET_FILE:QWindowKit::Widgets&amp;gt;&quot;)
    message(STATUS &quot;QWK lib ${QWK_CORE_FILE}&quot;)
    install(TARGETS QWindowKit::Core QWindowKit::Widgets DESTINATION ${CMAKE_INSTALL_BINDIR})
else()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;修改原因&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LOCATION属性已弃用&lt;/strong&gt;：CMake官方已经弃用了LOCATION属性，因为它在生成器表达式和多配置生成器中存在问题。错误信息明确建议使用生成器表达式&lt;code&gt;$&amp;lt;TARGET_FILE&amp;gt;&lt;/code&gt;代替。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装方式更新&lt;/strong&gt;：将&lt;code&gt;install(FILES ...)&lt;/code&gt;改为&lt;code&gt;install(TARGETS ...)&lt;/code&gt;是更现代的CMake做法，它能够正确处理所有依赖关系和平台特定的安装规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成器表达式的优势&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;生成器表达式在构建时而非配置时求值，更适合多配置生成器（如Visual Studio）&lt;/li&gt;
&lt;li&gt;能够正确处理不同构建类型（Debug/Release）的目标文件路径&lt;/li&gt;
&lt;li&gt;自动处理平台特定的文件扩展名和前缀（如Windows的.dll，Linux的.so）&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Arch-关于wayland下获取录屏流</title><link>https://paradoxmoranis.github.io/posts/%E5%85%B3%E4%BA%8Ewayland%E4%B8%8B%E8%8E%B7%E5%8F%96%E5%BD%95%E5%B1%8F%E6%B5%81/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/%E5%85%B3%E4%BA%8Ewayland%E4%B8%8B%E8%8E%B7%E5%8F%96%E5%BD%95%E5%B1%8F%E6%B5%81/</guid><description>本篇文章主要讲解如何在wayland下获取录屏流以便于使用OBS。</description><pubDate>Thu, 11 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;关于wayland下获取录屏流&lt;/h1&gt;
&lt;h2&gt;1.安装pipewire以及相关包&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S pipewire pipewire-pulse pipewire-alsa qt6-wayland
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;2.确保PipeWire服务正在运行&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;systemctl --user enable --now pipewire pipewire-pluse
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;3.安装xdg-desktop&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S xdg-desktop-portal-kde # 如果是hyprland就是xdg-desktop-portal-hyprland，以此类推
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;做完这些，OBS中就可以看到&lt;code&gt;屏幕捕捉(pipewire)&lt;/code&gt;&lt;/p&gt;
</content:encoded></item><item><title>Arch-使用OBS的虚拟摄像头</title><link>https://paradoxmoranis.github.io/posts/%E5%9C%A8arch%E4%BD%BF%E7%94%A8obs%E7%9A%84%E8%99%9A%E6%8B%9F%E6%91%84%E5%83%8F%E5%A4%B4/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/%E5%9C%A8arch%E4%BD%BF%E7%94%A8obs%E7%9A%84%E8%99%9A%E6%8B%9F%E6%91%84%E5%83%8F%E5%A4%B4/</guid><description>本篇文章主要讲解如何使用OBS的虚拟摄像头。</description><pubDate>Thu, 11 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;在Arch使用OBS的虚拟摄像头&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查 OBS Studio 版本&lt;/strong&gt;&lt;br /&gt;
确保你的 OBS Studio 版本支持虚拟摄像头功能。虚拟摄像头支持从 OBS Studio 26.1 开始引入。运行以下命令检查版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Q obs-studio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果版本低于 26.1，建议更新到最新版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S obs-studio
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 v4l2loopback 模块&lt;/strong&gt;&lt;br /&gt;
虚拟摄像头需要 &lt;code&gt;v4l2loopback&lt;/code&gt; 内核模块支持。安装 &lt;code&gt;v4l2loopback-dkms&lt;/code&gt; 和相关工具：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S v4l2loopback-dkms v4l2loopback-utils
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确保你的系统已安装内核头文件（&lt;code&gt;linux-headers&lt;/code&gt; 或对应内核的头文件，例如 &lt;code&gt;linux-lts-headers&lt;/code&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S linux-headers
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加载 v4l2loopback 模块&lt;/strong&gt;&lt;br /&gt;
安装完成后，手动加载 &lt;code&gt;v4l2loopback&lt;/code&gt; 模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo modprobe v4l2loopback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以检查模块是否加载成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsmod | grep v4l2loopback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果需要自定义虚拟摄像头设备，可以指定参数，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo modprobe v4l2loopback devices=1 video_nr=2 card_label=&quot;OBS Virtual Camera&quot; exclusive_caps=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这会创建一个名为 &quot;OBS Virtual Camera&quot; 的设备，位于 &lt;code&gt;/dev/video2&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查 OBS 设置&lt;/strong&gt;&lt;br /&gt;
启动 OBS Studio，检查“控制”面板中是否出现“启动虚拟摄像头”按钮。如果没有，可能是以下原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块未加载&lt;/strong&gt;：确保 &lt;code&gt;v4l2loopback&lt;/code&gt; 模块已正确加载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flatpak 安装问题&lt;/strong&gt;：如果你通过 Flatpak 安装了 OBS Studio，虚拟摄像头可能不可用。建议使用 Arch 官方仓库的版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S obs-studio
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Wayland 支持&lt;/strong&gt;：如果使用 Wayland 桌面环境，确保安装了 &lt;code&gt;qt6-wayland&lt;/code&gt;（OBS 28 及以上版本需要）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S qt6-wayland
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证虚拟摄像头&lt;/strong&gt;&lt;br /&gt;
启动虚拟摄像头后，检查是否出现在设备列表中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v4l2-ctl --list-devices
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你应该能看到类似 &quot;OBS Virtual Camera&quot; 的设备。如果设备存在但无法在其他应用（如 Zoom、Skype）中使用，可能是权限问题。确保你的用户在 &lt;code&gt;video&lt;/code&gt; 组中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo usermod -aG video $USER
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后重新登录或重启系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决常见问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“启动虚拟摄像头失败”错误&lt;/strong&gt;：检查日志文件（在 OBS 的“帮助”菜单中选择“日志文件”）。常见问题可能是 &lt;code&gt;v4l2loopback&lt;/code&gt; 版本与内核不兼容。尝试降级到较旧的版本（例如 0.13.2）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -R v4l2loopback-dkms v4l2loopback-utils
yay -S v4l2loopback-dkms=0.13.2-1 v4l2loopback-utils=0.13.2-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与其他设备冲突&lt;/strong&gt;：如果有其他设备（如 DroidCam）占用 &lt;code&gt;/dev/video0&lt;/code&gt;，可以卸载冲突模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo modprobe -r v4l2loopback
sudo modprobe v4l2loopback
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重启 OBS 和系统&lt;/strong&gt;&lt;br /&gt;
在安装模块或更改配置后，重启 OBS Studio 或整个系统以确保所有更改生效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考来源：&lt;a href=&quot;https://wiki.archlinux.org/title/Open_Broadcaster_Software&quot;&gt;ArchWiki&lt;/a&gt;&lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=304978&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=305169&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content:encoded></item><item><title>Arch-paru和pacman用法详解</title><link>https://paradoxmoranis.github.io/posts/pacman%E5%92%8Cparu%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</link><guid isPermaLink="true">https://paradoxmoranis.github.io/posts/pacman%E5%92%8Cparu%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid><description>本篇文章主要讲解如何在wayland下获取录屏流以便于使用OBS。</description><pubDate>Thu, 11 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;pacman和paru用法详解&lt;/h1&gt;
&lt;h2&gt;一、pacman 用法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pacman&lt;/code&gt;（Package Manager）是 Arch Linux 的核心包管理工具，用于安装、更新、删除和管理官方仓库中的软件包。它的命令通常需要以 &lt;code&gt;sudo&lt;/code&gt; 运行，因为包管理涉及系统级操作。&lt;/p&gt;
&lt;h3&gt;1. 基本命令格式&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman [选项] [操作] [包名]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. 常用操作&lt;/h3&gt;
&lt;h4&gt;(1) 同步和更新系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;更新软件包数据库和所有已安装的包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Syu
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-S&lt;/code&gt;：同步软件包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-y&lt;/code&gt;：刷新软件包数据库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;：升级所有已安装的包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仅更新软件包数据库&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Sy
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制刷新数据库&lt;/strong&gt;（当数据库损坏或需要强制更新时）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Syy
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) 安装软件包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装指定的软件包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例：安装 &lt;code&gt;vim&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S vim
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装多个软件包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S 包名1 包名2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装本地包文件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -U /路径/到/包文件.tar.zst
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) 删除软件包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除软件包但保留其配置文件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -R 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除软件包及其配置文件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Rns 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;：删除配置文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;：递归删除不再需要的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清理无用的依赖&lt;/strong&gt;（孤儿包）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Rns $(pacman -Qtdq)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Qtdq&lt;/code&gt;：列出无依赖的孤儿包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(4) 查询软件包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;搜索官方仓库中的软件包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Ss 关键字
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例：搜索包含 “firefox” 的包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Ss firefox
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查询已安装的软件包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Qs 关键字
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;列出所有已安装的包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Q
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查看某个包的详细信息&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Si 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（本地已安装的包用 &lt;code&gt;-Qi&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(5) 清理缓存&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清理未使用的包缓存&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Sc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清理所有缓存&lt;/strong&gt;（谨慎使用）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Scc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(6) 其他实用操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;列出显式安装的包&lt;/strong&gt;（非依赖安装的包）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Qe
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查依赖问题&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -Dk
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决文件冲突&lt;/strong&gt;（强制覆盖）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S --overwrite &apos;*&apos; 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. 配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pacman&lt;/code&gt; 的配置文件位于 &lt;code&gt;/etc/pacman.conf&lt;/code&gt;，可以在这里调整仓库、镜像、并行下载等设置。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用并行下载&lt;/strong&gt;：
编辑 &lt;code&gt;/etc/pacman.conf&lt;/code&gt;，设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ParallelDownloads = 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;添加第三方仓库&lt;/strong&gt;：
在 &lt;code&gt;[core]&lt;/code&gt;、 &lt;code&gt;[extra]&lt;/code&gt; 等后添加自定义仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免部分升级&lt;/strong&gt;：不要只运行 &lt;code&gt;pacman -Sy&lt;/code&gt; 而不升级系统（&lt;code&gt;-u&lt;/code&gt;），否则可能导致依赖不一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查镜像&lt;/strong&gt;：使用 &lt;code&gt;reflector&lt;/code&gt; 或手动编辑 &lt;code&gt;/etc/pacman.d/mirrorlist&lt;/code&gt; 选择快速的镜像。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误处理&lt;/strong&gt;：遇到数据库锁定时，删除 &lt;code&gt;/var/lib/pacman/db.lck&lt;/code&gt;（确保没有其他 pacman 进程运行）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;二、paru 用法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;paru&lt;/code&gt; 是一个 AUR 助手，扩展了 &lt;code&gt;pacman&lt;/code&gt; 的功能，允许用户方便地从 AUR 安装和管理社区维护的软件包。&lt;code&gt;paru&lt;/code&gt; 完全兼容 &lt;code&gt;pacman&lt;/code&gt; 的命令，同时增加了对 AUR 的支持。&lt;/p&gt;
&lt;h3&gt;1. 安装 paru&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;paru&lt;/code&gt; 本身需要从 AUR 安装，步骤如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S base-devel git
git clone https://aur.archlinux.org/paru.git
cd paru
makepkg -si
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. 基本命令格式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;paru&lt;/code&gt; 的命令与 &lt;code&gt;pacman&lt;/code&gt; 高度一致，基本可以直接替换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru [选项] [操作] [包名]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. 常用操作&lt;/h3&gt;
&lt;h4&gt;(1) 更新系统和 AUR 包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;更新官方仓库和 AUR 包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Syu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这会同时检查官方仓库和 AUR 的更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仅更新 AUR 包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Sua
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) 安装软件包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;从官方仓库或 AUR 安装包&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -S 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例：安装 AUR 中的 &lt;code&gt;visual-studio-code-bin&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -S visual-studio-code-bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装时查看 PKGBUILD 文件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -S 包名 --editmenu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这允许在安装前检查或编辑 AUR 包的构建脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) 删除软件包&lt;/h4&gt;
&lt;p&gt;与 &lt;code&gt;pacman&lt;/code&gt; 一致：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Rns 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;(4) 查询软件包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;搜索官方仓库和 AUR&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Ss 关键字
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查看 AUR 包信息&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Si 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(5) 清理缓存&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清理缓存&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Sc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清理 AUR 构建目录&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Rns $(paru -Qdtq)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(6) 特殊功能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查看 PKGBUILD 文件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Gp 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出指定 AUR 包的 PKGBUILD 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跳过某些包的更新&lt;/strong&gt;：
编辑 &lt;code&gt;/etc/paru.conf&lt;/code&gt;，添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Skip = 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;批量操作&lt;/strong&gt;：
&lt;code&gt;paru&lt;/code&gt; 支持交互式界面。例如，安装多个包时会显示详细信息并允许选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;paru&lt;/code&gt; 的配置文件位于 &lt;code&gt;~/.config/paru/paru.conf&lt;/code&gt;，可以自定义行为，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用颜色输出&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Color
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自动清理构建依赖&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RemoveMake
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. 注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：AUR 包由社区维护，安装前应检查 PKGBUILD 文件，避免潜在的安全风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;：&lt;code&gt;paru&lt;/code&gt; 自动处理 AUR 包的依赖，但复杂依赖可能需要手动干预。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：&lt;code&gt;paru&lt;/code&gt; 比 &lt;code&gt;yay&lt;/code&gt;（另一个 AUR 助手）更轻量，适合资源有限的系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;三、pacman 和 paru 的对比&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;pacman&lt;/th&gt;
&lt;th&gt;paru&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;支持的仓库&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;官方仓库（core/extra/community）&lt;/td&gt;
&lt;td&gt;官方仓库 + AUR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;命令兼容性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;标准命令&lt;/td&gt;
&lt;td&gt;兼容 pacman 命令，扩展 AUR 功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AUR 支持&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;有，自动下载、构建、安装 AUR 包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;快速，官方工具&lt;/td&gt;
&lt;td&gt;稍慢（因 AUR 构建），但优化良好&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;配置文件&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/pacman.conf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.config/paru/paru.conf&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;系统更新、官方包管理&lt;/td&gt;
&lt;td&gt;AUR 包安装、混合仓库管理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;h2&gt;四、实用技巧&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;快速更新系统&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;paru -Syu --noconfirm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自动确认所有提示（谨慎使用）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查找包的所属软件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Qo /路径/到/文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看某个文件属于哪个包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化镜像&lt;/strong&gt;：
使用 &lt;code&gt;reflector&lt;/code&gt; 自动选择最快的镜像：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo reflector --country China --latest 10 --sort rate --save /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;备份已安装的包列表&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -Qe &amp;gt; pkglist.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;恢复时：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman -S - &amp;lt; pkglist.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理 AUR 构建失败&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查 &lt;code&gt;PKGBUILD&lt;/code&gt; 是否需要特定依赖。&lt;/li&gt;
&lt;li&gt;确保 &lt;code&gt;base-devel&lt;/code&gt; Ascertain是否启用 &lt;code&gt;sudo&lt;/code&gt;（需要 &lt;code&gt;sudo&lt;/code&gt; 权限）。&lt;/li&gt;
&lt;li&gt;更新系统并重新尝试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;五、常见问题解决&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“数据库锁”错误&lt;/strong&gt;：
删除锁文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo rm /var/lib/pacman/db.lck
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名验证失败&lt;/strong&gt;：
初始化或更新 GPG 密钥：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pacman-key --init
sudo pacman-key --populate archlinux
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AUR 包构建失败&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保安装了 &lt;code&gt;base-devel&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;检查网络连接（AUR 需要下载源码）。&lt;/li&gt;
&lt;li&gt;查看错误日志，安装缺失的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item></channel></rss>